## THIS FILE IS AUTOGENERATED -- DO NOT EDIT
# Build envtplg.
# we don't need to be clean/efficient here because we're just using this
# as an intermediate stage.
FROM golang:1.12-buster as envtplg-builder

COPY files/sources.list /etc/apt/sources.list
RUN set -o nounset -o errexit -o xtrace -o verbose \
    && apt-get update -qq \
    && apt-get install -y --no-install-recommends --no-install-suggests \
        git \
        bash

COPY tools /tmp/tools
WORKDIR /tmp/tools

ENV CGO_ENABLED=0
RUN go get github.com/subfuzion/envtpl/...

##########################################################################
# Actual image.
FROM registry.internal.telnyx.com/jenkins/python:3.8-slim

LABEL \
    maintainer.name="Telnyx Engineering" \
    maintainer.email="engineering@telnyx.com"

ARG SERVICE_USERNAME="service"
ARG SERVICE_USER_ID="5000"
ARG VERSION_PYTHON="3.8"
ARG VERSION_S6_OVERLAY="3.1.0.1"
ARG VERSION_PY_SPY="0.3.3"
ARG LIBC="gnu"

ENV PYVENV /opt/venv
ENV PYBIN ${PYVENV}/bin
ENV PROVENANCE_FILE /etc/image-base-info.json

ADD containerroot /

RUN set -o nounset -o errexit -o xtrace -o verbose \
    # - install main packages.
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        xz-utils \
        # for py-spy
        libunwind8 \
    && rm -rf /var/lib/apt/lists/* \
    && python3 -B -c "import os,sys;exp_minor = int(os.environ.get('VERSION_PYTHON').split('-')[0].split('.')[1:2][0]);sys.exit((sys.version_info.minor - exp_minor) and sys.version_info.minor)" \
    && mkdir -p ${PYVENV} \
    && python3 -B -m venv ${PYVENV} \
    \
    # - install s6-overlay.
    && cd /tmp \
    && TARGET_PREFIX="s6-overlay-v${VERSION_S6_OVERLAY}" \
    && curl --silent --show-error --location --output "${TARGET_PREFIX}-noarch.tar.xz" \
        https://github.com/just-containers/s6-overlay/releases/download/v${VERSION_S6_OVERLAY}/s6-overlay-noarch.tar.xz \
    && curl --silent --show-error --location --output "${TARGET_PREFIX}-x86_64.tar.xz" \
        https://github.com/just-containers/s6-overlay/releases/download/v${VERSION_S6_OVERLAY}/s6-overlay-x86_64.tar.xz \
    && grep "$TARGET_PREFIX" /opt/releases.sha512 | sha512sum -c - \
    && tar --extract --xz --file "${TARGET_PREFIX}-noarch.tar.xz" --directory / \
    && tar --extract --xz --file "${TARGET_PREFIX}-x86_64.tar.xz" --directory / \
    && rm ${TARGET_PREFIX}* \
    \
    # - install py-spy (requires `--cap-add SYS_PTRACE` permission in `docker run` command to work)
    && cd /tmp \
    && TARGET="py-spy-v${VERSION_PY_SPY}-x86_64-unknown-linux-${LIBC}.tar.gz" \
    && curl --silent --show-error --location --output "$TARGET" \
        https://github.com/benfred/py-spy/releases/download/v${VERSION_PY_SPY}/py-spy-v${VERSION_PY_SPY}-x86_64-unknown-linux-${LIBC}.tar.gz \
    && grep "$TARGET" /opt/releases.sha512 | sha512sum -c - \
    && tar zxf "$TARGET" -C /usr/local/bin \
    && rm "$TARGET" \
    \
    # - user/group config.
    && groupadd \
        --gid ${SERVICE_USER_ID} \
        ${SERVICE_USERNAME} \
    && useradd \
        --home-dir /app \
        --uid ${SERVICE_USER_ID} \
        --gid ${SERVICE_USER_ID} \
        --no-user-group \
        --no-create-home \
        --shell /usr/sbin/nologin \
        ${SERVICE_USERNAME} \
    \
    # - install python/jinja2 envtpl
    && ${PYBIN}/python3 -B -m venv /opt/envtplpy \
        --without-pip \
    && ${PYBIN}/python3 -B -m pip install \
        --requirement=/opt/envtplpy/requirements.txt \
        --target=/opt/envtplpy/lib/python3.8/site-packages \
        --no-deps \
        --no-cache \
    && chmod +x /opt/envtplpy/bin/envtpl \
    && ln -s /opt/envtplpy/bin/envtpl /usr/local/bin/envtpl \
    \
    # check s6 installed and user created as expected
    && [ $(/command/s6-setuidgid "${SERVICE_USERNAME}" id -u) -eq "${SERVICE_USER_ID}" ] \
    && [ $(/command/s6-setuidgid "${SERVICE_USERNAME}" id -g) -eq "${SERVICE_USER_ID}" ] \
    \
    # check py-spy
    && py-spy --version

# - install/add golang envtpl.
COPY --from=envtplg-builder /go/bin/envtpl /usr/local/bin/envtplg

ARG PY3S6_BUILD_DATE=""
ARG PY3S6_BUILD_URL=""
ARG PY3S6_BUILD_NUMBER=""
ARG PY3S6_GIT_COMMIT=""
ARG PY3S6_GIT_COMMIT_DATE=""

ENV S6_BEHAVIOUR_IF_STAGE2_FAILS=2 \
    SVC_DIR=/etc/services.d \
    SERVICE_USER_ID=5000 \
    SERVICE_USERNAME=service \
    PY3S6_BUILD_DATE="$PY3S6_BUILD_DATE" \
    PY3S6_BUILD_URL="$PY3S6_BUILD_URL" \
    PY3S6_BUILD_NUMBER="$PY3S6_BUILD_NUMBER" \
    PY3S6_GIT_COMMIT="$PY3S6_GIT_COMMIT" \
    PY3S6_GIT_COMMIT_DATE="$PY3S6_GIT_COMMIT_DATE"

# The var setting/checks could be first thing to fail-fast, but then it
# would invalidate the entire cache every commit and build, so builds
# would be much longer. Because the vars are baked in the Makefile, failures
# here should only crop up when modifying it a ton anyway.
RUN [ "/bin/bash", "-c", "set -o nounset -o errexit -o xtrace -o verbose \
    && : ${VERSION_PYTHON:?Build argument must be set and non-empty.} \
    && : ${VERSION_S6_OVERLAY:?Build argument must be set and non-empty.} \
    && : ${VERSION_PY_SPY:?Build argument must be set and non-empty.} \
    && : ${PY3S6_BUILD_DATE:?Build argument must be set and non-empty.} \
    && : ${PY3S6_BUILD_URL:?Build argument must be set and non-empty.} \
    && : ${PY3S6_BUILD_NUMBER:?Build argument must be set and non-empty.} \
    && : ${PY3S6_GIT_COMMIT:?Build argument must be set and non-empty.} \
    && : ${PY3S6_GIT_COMMIT_DATE:?Build argument must be set and non-empty.} \
    # yes, the degree sign is dumb, but it sidesteps every other char
    # being special to bash or possibly being in the fields.
    && echo \"{ \
        °build°: { \
            °date°: °${PY3S6_BUILD_DATE}°, \
            °number°: °${PY3S6_BUILD_NUMBER}°, \
            °url°: °${PY3S6_BUILD_URL}° \
        }, \
        °version°: { \
            °s6°: °${VERSION_S6_OVERLAY}°, \
            °python°: °${VERSION_PYTHON}°, \
            °pyspy°: °${VERSION_PY_SPY}° \
        }, \
        °commit°: { \
            °date°: °${PY3S6_GIT_COMMIT_DATE}°, \
            °hash°: °${PY3S6_GIT_COMMIT}° \
        } \
    }\" \
    | sed 's/°/\\\"/g' \
    | ${PYBIN}/python3 -m json.tool \
    > ${PROVENANCE_FILE} \
"]

WORKDIR /app

ENTRYPOINT ["/init"]
