#!/usr/bin/env python3
"""
bake/report information about the image
"""

import argparse
import datetime
import json
import subprocess
import sys


def osrelease():
    info = {}
    with open("/etc/os-release", mode="r") as f:
        for line in f:
            try:
                k, v = line.strip().split("=", 1)
            except ValueError:
                continue
            if len(v) >= 2 and v[0] == v[-1] == '"':
                v = v[1:-1]
            info[k] = v
    return info


def apks():
    proc = subprocess.run(
        ["apk", "info"], universal_newlines=True, stdout=subprocess.PIPE, check=True
    )

    pkg_names = [p for p in (p.strip() for p in proc.stdout.splitlines()) if p]
    pkgs = {}

    for pkg in pkg_names:
        proc = subprocess.run(
            ["apk", "info", "--size", pkg],
            universal_newlines=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
            check=True,
        )
        lines = proc.stdout.splitlines()

        header = lines[0]
        size = int(lines[1].strip())
        assert header.startswith(pkg + "-")

        _header_tail = " installed size:"
        assert header.endswith(_header_tail)

        pkg_version = lines[0][len(pkg) + 1:-len(_header_tail)]

        pkgs[pkg] = {"size": size, "version": pkg_version}

    pkg_info = {
        "manager": "apk",
        "packages": pkgs,
        "total_size": sum(p["size"] for p in pkgs.values()),
    }
    return pkg_info


def alpine_info(release_info):
    apk_pkgs = apks()
    info = {
        "distro": "alpine",
        "distro_version": release_info["VERSION_ID"],
        "distro_packages": apk_pkgs,
    }
    print(json.dumps(info, indent=2, sort_keys=True))


def dpkgs():
    proc = subprocess.run(
        ["dpkg-query", "--show", "--showformat", "${Package} ${Installed-Size} ${Version}\\\n"],
        universal_newlines=True,
        stdout=subprocess.PIPE,
        check=True,
    )
    lines = proc.stdout.splitlines()

    pkgs = {}
    for line in lines:
        print(line)
        pkg, size, pkg_version = line.split(" ")
        pkgs[pkg] = {
            "version": pkg_version,
            # https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-installed-size
            "size": int(size.strip()) * 1024,
            }

    pkg_info = {
        "manager": "apt",
        "packages": pkgs,
        "total_size": sum(p["size"] for p in pkgs.values()),
    }
    return pkg_info


def debian_info(release_info):
    deb_pkgs = dpkgs()
    info = {
        "distro": release_info["ID"],
        "distro_version": release_info["VERSION_ID"],
        "distro_packages": deb_pkgs,
    }
    print(json.dumps(info, indent=2, sort_keys=True))



RELEASE_INFO_FUNCS = {
    "alpine": alpine_info,
    "debian": debian_info,
    "ubuntu": debian_info,
}


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose mode")
    args = parser.parse_args()

    release_info = osrelease()

    return RELEASE_INFO_FUNCS[release_info["ID"]](release_info)


if __name__ == "__main__":
    sys.exit(main())
